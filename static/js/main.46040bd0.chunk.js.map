{"version":3,"sources":["utils/Message.js","utils/Score.js","utils/TopScore.js","components/Nav/index.js","components/Header/index.js","components/Card/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Message","props","text","Score","className","score","TopScore","topScore","Nav","href","Header","Card","onClick","clickHandle","id","role","style","backgroundImage","image","Wrapper","children","App","x","state","clicked","concat","setState","message","console","log","i","length","Chars","TekkenChars","this","array","j","Math","floor","random","temp","shuffleArray","map","chars","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+iCAUeA,MARf,SAAiBC,GAET,OACA,6BACJ,4BAAKA,EAAMC,QCGAC,MAPf,SAAeF,GACX,OACI,yBAAKG,UAAU,eACZ,sCAAW,8BAAOH,EAAMI,UCKpBC,MARf,SAAkBL,GACV,OACI,yBAAKG,UAAU,oBACf,6CAAkB,8BAAOH,EAAMM,a,MCwB5BC,MAvBf,SAAaP,GACT,OACJ,6BACI,yBAAKG,UAAU,8CACX,uBAAGA,UAAU,yBAAyBK,KAAK,KAAI,4CAEnD,kBAAC,EAAD,CACCP,KAAMD,EAAMC,OAEjB,6BACI,kBAAC,EAAD,CACAG,MAAOJ,EAAMI,QAEb,kBAAC,EAAD,CACCE,SAAUN,EAAMM,e,MCTNG,MATf,WACI,OACI,yBAAKN,UAAU,WACX,2CACA,0G,MCIGO,MAPf,SAAcV,GACV,OACI,yBAAKW,QAAS,kBAAMX,EAAMY,YAAYZ,EAAMa,KAAKV,UAAU,SAAQW,KAAK,MAAMC,MAAO,CAACC,gBAAiB,OAAOhB,EAAMiB,MAAO,Q,aCIpHC,MANf,SAAiBlB,GACb,OACA,yBAAKG,UAAU,qBAAqBH,EAAMmB,W,IC8F/BC,E,YA/Eb,WAAYpB,GAAO,IAAD,8BAChB,4CAAMA,KAYVY,YAAc,SAAAC,GAGZ,IAAOQ,EAAI,EAAKC,MAAMC,QAAQC,OAAOX,GAErC,EAAKY,SAAS,CAACC,QAAS,CAACzB,KAAM,GAAIG,MAAO,EAAKkB,MAAMI,QAAQtB,MAAQ,EAAGE,SAAU,EAAKgB,MAAMI,QAAQpB,SAAW,KAGhHqB,QAAQC,IAAI,EAAKN,MAAMC,SACvB,IAAI,IAAIM,EAAI,EAAGA,EAAI,EAAKP,MAAMC,QAAQO,OAAQD,IAE3C,EAAKP,MAAMC,QAAQM,KAAOhB,GAE3B,EAAKY,SAAS,CACZF,QAAU,GACVG,QAAS,CACPzB,KAAM,8BACNG,MAAO,EACPE,SAAU,KAQd,EAAKmB,SAAS,CAACF,QAASF,KArCxB,EAAKC,MAAQ,CACXS,MAAQC,EACRT,QAAU,GACVG,QAAS,CACPzB,KAAM,0BACNG,MAAO,EACPE,SAAU,IARE,E,sEAmDX,IAAD,OAEN,OAEE,yBAAKH,UAAU,OACd,kBAAC,EAAD,CACAF,KAAMgC,KAAKX,MAAMI,QAAQzB,KACzBG,MAAO6B,KAAKX,MAAMI,QAAQtB,MAC1BE,SAAU2B,KAAKX,MAAMI,QAAQpB,WAE7B,kBAAC,EAAD,MACA,kBAAC,EAAD,KA1EL,SAAsB4B,GACpB,IAAK,IAAIL,EAAIK,EAAMJ,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAMM,EAAIC,KAAKC,MAAMD,KAAKE,UAAYT,EAAI,IACpCU,EAAOL,EAAML,GACnBK,EAAML,GAAKK,EAAMC,GACjBD,EAAMC,GAAKI,EAEb,OAAOL,EAoEHM,CAAaP,KAAKX,MAAMS,OAAOU,KAAI,SAAAC,GAAK,OAEzC,kBAAC,EAAD,CACA9B,YAAa,EAAKA,YAClBC,GAAI6B,EAAM7B,GACV8B,IAAKD,EAAM7B,GACXI,MAAOyB,EAAMzB,iB,GAtEA2B,aCPEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.46040bd0.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Message(props) {\n    \n        return (\n        <div>\n    <h2>{props.text}</h2>\n        </div>)\n}\n\nexport default Message;","import React from 'react'\n\nfunction Score(props) {\n    return(\n        <div className=\"float-left \">\n           <h4> Score <span>{props.score}</span></h4>\n        </div>\n    ) \n}\nexport default Score;","import React from 'react'\n\nfunction TopScore(props){\n        return(\n            <div className=\"float-right pl-1\">\n            <h4>  | Top Score <span>{props.topScore}</span></h4>\n            </div>\n        )\n\n}\nexport default TopScore;","import React from 'react'\nimport Message from '../../utils/Message'\nimport Score from '../../utils/Score'\nimport TopScore from '../../utils/TopScore'\nimport './style.css'\n\nfunction Nav(props){\n    return (\n<div>\n    <nav className=\"navbar fixed-top navbar-warning bg-warning\">\n        <a className=\"navbar-brand text-dark\" href=\"/\"><h1>Clicky Game</h1></a>\n\n    <Message \n     text={props.text}\n    />\n<div>\n    <Score \n    score={props.score}\n    />\n    <TopScore \n     topScore={props.topScore}\n    />\n</div>\n  \n    </nav>\n</div>\n    )\n}\n\nexport default Nav;","import React from 'react'\nimport './style.css'\nfunction Header(){\n    return(\n        <div className=\"header \">\n            <h2>Clicky Game</h2>\n            <h5>Click on an image to earn points, but don't click on any more than once!</h5>\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react'\nimport './style.css'\n\nfunction Card(props){\n    return(\n        <div onClick={() => props.clickHandle(props.id)} className=\"images\"role=\"img\" style={{backgroundImage: 'url('+props.image +')'}}>\n\n        </div>\n    )\n}\nexport default Card;","import React from 'react'\nimport './style.css'\n\nfunction Wrapper(props){\n    return(\n    <div className=\"wrapper container\">{props.children}</div>\n    )\n}\n\nexport default Wrapper;","import React, { Component } from 'react';\nimport './App.css';\nimport Nav from './components/Nav';\nimport Header from './components/Header';\nimport Card from './components/Card';\nimport TekkenChars from './tekkenchars.json';\nimport Wrapper from './components/Wrapper'\n\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      Chars : TekkenChars,\n      clicked : [],\n      message: {\n        text: \"Click to start the game\",\n        score: 0,\n        topScore: 0\n      }\n    }\n  }\n\nclickHandle = id => {\n\n  //capturing the images already clicked \n  const  x = this.state.clicked.concat(id);\n  \n  this.setState({message: {text: \"\", score: this.state.message.score + 1, topScore: this.state.message.topScore + 1}})\n\n  \n  console.log(this.state.clicked)\n  for(let i = 0; i < this.state.clicked.length; i++){\n    \n  if(this.state.clicked[i] === id){\n\n    this.setState({\n      clicked : [],\n      message: {\n        text: \"Sorry, you lost! Try again?\",\n        score: 0,\n        topScore: 0\n      }\n    })\n  }\n  \n  }\n\n    \n    this.setState({clicked: x})\n\n\n\n    \n\n\n};\n\n\n\n\nrender(){\n  \n  return (\n\n    <div className=\"App\">\n     <Nav\n     text={this.state.message.text}\n     score={this.state.message.score}\n     topScore={this.state.message.topScore}\n     />\n     <Header />\n     <Wrapper>\n     {shuffleArray(this.state.Chars).map(chars =>(\n\n     <Card \n     clickHandle={this.clickHandle}\n     id={chars.id}\n     key={chars.id}\n     image={chars.image}\n     />\n     ))}\n      </Wrapper>\n    </div>\n  );\n}\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}